/**
 * @module schemas/blocks
 *
 * Block schemas for all Notion block types.
 * These schemas provide runtime validation and type definitions for every
 * block type supported by the Notion API.
 */

import { type } from "arktype";
import { apiColorSchema, fileSchema, iconSchema, isoDateSchema, richTextSchema } from "./core";

// ============================================================================
// Base Block Properties
// ============================================================================

/**
 * Base properties shared by all block types.
 */
const baseBlockProperties = {
  id: "string",
  object: '"block"' as const,
  created_time: isoDateSchema,
  created_by: {
    object: '"user"' as const,
    id: "string"
  },
  last_edited_time: isoDateSchema,
  last_edited_by: {
    object: '"user"' as const,
    id: "string"
  },
  has_children: "boolean",
  archived: "boolean",
  "parent?": {
    type: '"page_id" | "block_id" | "database_id" | "workspace"',
    "page_id?": "string",
    "block_id?": "string",
    "database_id?": "string",
    "workspace?": "boolean"
  }
} as const;

// ============================================================================
// Text Block Schemas
// ============================================================================

/**
 * Schema for paragraph blocks.
 */
export const paragraphBlockSchema = type({
  ...baseBlockProperties,
  type: '"paragraph"',
  paragraph: {
    rich_text: richTextSchema,
    color: apiColorSchema
  }
});

/**
 * Type representing a paragraph block.
 */
export type ParagraphBlock = typeof paragraphBlockSchema.infer;

/**
 * Schema for heading_1 blocks.
 */
export const heading1BlockSchema = type({
  ...baseBlockProperties,
  type: '"heading_1"',
  heading_1: {
    rich_text: richTextSchema,
    color: apiColorSchema,
    is_toggleable: "boolean"
  }
});

/**
 * Type representing a heading_1 block.
 */
export type Heading1Block = typeof heading1BlockSchema.infer;

/**
 * Schema for heading_2 blocks.
 */
export const heading2BlockSchema = type({
  ...baseBlockProperties,
  type: '"heading_2"',
  heading_2: {
    rich_text: richTextSchema,
    color: apiColorSchema,
    is_toggleable: "boolean"
  }
});

/**
 * Type representing a heading_2 block.
 */
export type Heading2Block = typeof heading2BlockSchema.infer;

/**
 * Schema for heading_3 blocks.
 */
export const heading3BlockSchema = type({
  ...baseBlockProperties,
  type: '"heading_3"',
  heading_3: {
    rich_text: richTextSchema,
    color: apiColorSchema,
    is_toggleable: "boolean"
  }
});

/**
 * Type representing a heading_3 block.
 */
export type Heading3Block = typeof heading3BlockSchema.infer;

// ============================================================================
// List Block Schemas
// ============================================================================

/**
 * Schema for bulleted list item blocks.
 */
export const bulletedListItemBlockSchema = type({
  ...baseBlockProperties,
  type: '"bulleted_list_item"',
  bulleted_list_item: {
    rich_text: richTextSchema,
    color: apiColorSchema
  }
});

/**
 * Type representing a bulleted list item block.
 */
export type BulletedListItemBlock = typeof bulletedListItemBlockSchema.infer;

/**
 * Schema for numbered list item blocks.
 */
export const numberedListItemBlockSchema = type({
  ...baseBlockProperties,
  type: '"numbered_list_item"',
  numbered_list_item: {
    rich_text: richTextSchema,
    color: apiColorSchema
  }
});

/**
 * Type representing a numbered list item block.
 */
export type NumberedListItemBlock = typeof numberedListItemBlockSchema.infer;

/**
 * Schema for to-do blocks.
 */
export const toDoBlockSchema = type({
  ...baseBlockProperties,
  type: '"to_do"',
  to_do: {
    rich_text: richTextSchema,
    checked: "boolean",
    color: apiColorSchema
  }
});

/**
 * Type representing a to-do block.
 */
export type TodoBlock = typeof toDoBlockSchema.infer;

/**
 * Schema for toggle blocks.
 */
export const toggleBlockSchema = type({
  ...baseBlockProperties,
  type: '"toggle"',
  toggle: {
    rich_text: richTextSchema,
    color: apiColorSchema
  }
});

/**
 * Type representing a toggle block.
 */
export type ToggleBlock = typeof toggleBlockSchema.infer;

// ============================================================================
// Code Block Schema
// ============================================================================

/**
 * Schema for code blocks.
 */
export const codeBlockSchema = type({
  ...baseBlockProperties,
  type: '"code"',
  code: {
    rich_text: richTextSchema,
    caption: richTextSchema,
    language: "string"
  }
});

/**
 * Type representing a code block.
 */
export type CodeBlock = typeof codeBlockSchema.infer;

// ============================================================================
// Child Reference Block Schemas
// ============================================================================

/**
 * Schema for child page blocks.
 */
export const childPageBlockSchema = type({
  ...baseBlockProperties,
  type: '"child_page"',
  child_page: {
    title: "string"
  }
});

/**
 * Type representing a child page block.
 */
export type ChildPageBlock = typeof childPageBlockSchema.infer;

/**
 * Schema for child database blocks.
 */
export const childDatabaseBlockSchema = type({
  ...baseBlockProperties,
  type: '"child_database"',
  child_database: {
    title: "string"
  }
});

/**
 * Type representing a child database block.
 */
export type ChildDatabaseBlock = typeof childDatabaseBlockSchema.infer;

// ============================================================================
// Media Block Schemas
// ============================================================================

/**
 * Schema for embed blocks.
 */
export const embedBlockSchema = type({
  ...baseBlockProperties,
  type: '"embed"',
  embed: {
    "url?": "string",
    "caption?": richTextSchema
  }
});

/**
 * Type representing an embed block.
 */
export type EmbedBlock = typeof embedBlockSchema.infer;

/**
 * Schema for image blocks.
 */
export const imageBlockSchema = type({
  ...baseBlockProperties,
  type: '"image"',
  image: fileSchema
});

/**
 * Type representing an image block.
 */
export type ImageBlock = typeof imageBlockSchema.infer;

/**
 * Schema for video blocks.
 */
export const videoBlockSchema = type({
  ...baseBlockProperties,
  type: '"video"',
  video: fileSchema
});

/**
 * Type representing a video block.
 */
export type VideoBlock = typeof videoBlockSchema.infer;

/**
 * Schema for file blocks.
 */
export const fileBlockSchema = type({
  ...baseBlockProperties,
  type: '"file"',
  file: fileSchema
});

/**
 * Type representing a file block.
 */
export type FileBlock = typeof fileBlockSchema.infer;

/**
 * Schema for PDF blocks.
 */
export const pdfBlockSchema = type({
  ...baseBlockProperties,
  type: '"pdf"',
  pdf: fileSchema
});

/**
 * Type representing a PDF block.
 */
export type PdfBlock = typeof pdfBlockSchema.infer;

/**
 * Schema for audio blocks.
 */
export const audioBlockSchema = type({
  ...baseBlockProperties,
  type: '"audio"',
  audio: fileSchema
});

/**
 * Type representing an audio block.
 */
export type AudioBlock = typeof audioBlockSchema.infer;

// ============================================================================
// Special Block Schemas
// ============================================================================

/**
 * Schema for bookmark blocks.
 */
export const bookmarkBlockSchema = type({
  ...baseBlockProperties,
  type: '"bookmark"',
  bookmark: {
    url: "string",
    "caption?": richTextSchema
  }
});

/**
 * Type representing a bookmark block.
 */
export type BookmarkBlock = typeof bookmarkBlockSchema.infer;

/**
 * Schema for callout blocks.
 */
export const calloutBlockSchema = type({
  ...baseBlockProperties,
  type: '"callout"',
  callout: {
    rich_text: richTextSchema,
    icon: iconSchema,
    color: apiColorSchema
  }
});

/**
 * Type representing a callout block.
 */
export type CalloutBlock = typeof calloutBlockSchema.infer;

/**
 * Schema for quote blocks.
 */
export const quoteBlockSchema = type({
  ...baseBlockProperties,
  type: '"quote"',
  quote: {
    rich_text: richTextSchema,
    color: apiColorSchema
  }
});

/**
 * Type representing a quote block.
 */
export type QuoteBlock = typeof quoteBlockSchema.infer;

/**
 * Schema for equation blocks.
 */
export const equationBlockSchema = type({
  ...baseBlockProperties,
  type: '"equation"',
  equation: {
    expression: "string"
  }
});

/**
 * Type representing an equation block.
 */
export type EquationBlock = typeof equationBlockSchema.infer;

/**
 * Schema for divider blocks.
 */
export const dividerBlockSchema = type({
  ...baseBlockProperties,
  type: '"divider"',
  divider: type({})
});

/**
 * Type representing a divider block.
 */
export type DividerBlock = typeof dividerBlockSchema.infer;

/**
 * Schema for table of contents blocks.
 */
export const tableOfContentsBlockSchema = type({
  ...baseBlockProperties,
  type: '"table_of_contents"',
  table_of_contents: {
    "color?": apiColorSchema
  }
});

/**
 * Type representing a table of contents block.
 */
export type TableOfContentsBlock = typeof tableOfContentsBlockSchema.infer;

// ============================================================================
// Layout Block Schemas
// ============================================================================

/**
 * Schema for column blocks.
 */
export const columnBlockSchema = type({
  ...baseBlockProperties,
  type: '"column"',
  column: type({})
});

/**
 * Type representing a column block.
 */
export type ColumnBlock = typeof columnBlockSchema.infer;

/**
 * Schema for column list blocks.
 */
export const columnListBlockSchema = type({
  ...baseBlockProperties,
  type: '"column_list"',
  column_list: type({})
});

/**
 * Type representing a column list block.
 */
export type ColumnListBlock = typeof columnListBlockSchema.infer;

// ============================================================================
// Advanced Block Schemas
// ============================================================================

/**
 * Schema for link preview blocks.
 */
export const linkPreviewBlockSchema = type({
  ...baseBlockProperties,
  type: '"link_preview"',
  link_preview: {
    url: "string"
  }
});

/**
 * Type representing a link preview block.
 */
export type LinkPreviewBlock = typeof linkPreviewBlockSchema.infer;

/**
 * Schema for synced blocks.
 */
export const syncedBlockSchema = type({
  ...baseBlockProperties,
  type: '"synced_block"',
  synced_block: {
    "synced_from?":
      "null" |
      {
        "type?": '"block_id"',
        "block_id?": "string"
      }
  }
});

/**
 * Type representing a synced block.
 */
export type SyncedBlock = typeof syncedBlockSchema.infer;

/**
 * Schema for template blocks.
 */
export const templateBlockSchema = type({
  ...baseBlockProperties,
  type: '"template"',
  template: {
    rich_text: richTextSchema
  }
});

/**
 * Type representing a template block.
 */
export type TemplateBlock = typeof templateBlockSchema.infer;

/**
 * Schema for link to page blocks.
 */
export const linkToPageBlockSchema = type({
  ...baseBlockProperties,
  type: '"link_to_page"',
  link_to_page: {
    type: '"page_id" | "database_id"',
    "page_id?": "string",
    "database_id?": "string"
  }
});

/**
 * Type representing a link to page block.
 */
export type LinkToPageBlock = typeof linkToPageBlockSchema.infer;

// ============================================================================
// Table Block Schemas
// ============================================================================

/**
 * Schema for table blocks.
 */
export const tableBlockSchema = type({
  ...baseBlockProperties,
  type: '"table"',
  table: {
    table_width: "number",
    has_column_header: "boolean",
    has_row_header: "boolean"
  }
});

/**
 * Type representing a table block.
 */
export type TableBlock = typeof tableBlockSchema.infer;

/**
 * Schema for table row blocks.
 */
export const tableRowBlockSchema = type({
  ...baseBlockProperties,
  type: '"table_row"',
  table_row: {
    cells: [richTextSchema, "[]"]
  }
});

/**
 * Type representing a table row block.
 */
export type TableRowBlock = typeof tableRowBlockSchema.infer;

// ============================================================================
// Other Block Schemas
// ============================================================================

/**
 * Schema for breadcrumb blocks.
 */
export const breadcrumbBlockSchema = type({
  ...baseBlockProperties,
  type: '"breadcrumb"',
  breadcrumb: type({})
});

/**
 * Type representing a breadcrumb block.
 */
export type BreadcrumbBlock = typeof breadcrumbBlockSchema.infer;

/**
 * Schema for unsupported blocks.
 */
export const unsupportedBlockSchema = type({
  ...baseBlockProperties,
  type: '"unsupported"',
  unsupported: type({})
});

/**
 * Type representing an unsupported block.
 */
export type UnsupportedBlock = typeof unsupportedBlockSchema.infer;

// ============================================================================
// Block Union Schema
// ============================================================================

/**
 * Schema for any block type.
 * For now, using a simple approach that accepts any object with required base fields.
 * TODO: Implement proper discriminated union when ArkType issues are resolved.
 */
export const blockSchema = type({
  id: "string",
  object: '"block"',
  type: "string",
  created_time: isoDateSchema,
  created_by: {
    object: '"user"',
    id: "string"
  },
  last_edited_time: isoDateSchema,
  last_edited_by: {
    object: '"user"',
    id: "string"
  },
  has_children: "boolean",
  archived: "boolean",
  "...": "unknown"
});

/**
 * Type representing any block.
 */
export type Block =
  | ParagraphBlock
  | Heading1Block
  | Heading2Block
  | Heading3Block
  | BulletedListItemBlock
  | NumberedListItemBlock
  | TodoBlock
  | ToggleBlock
  | CodeBlock
  | ChildPageBlock
  | ChildDatabaseBlock
  | EmbedBlock
  | ImageBlock
  | VideoBlock
  | FileBlock
  | PdfBlock
  | BookmarkBlock
  | CalloutBlock
  | QuoteBlock
  | EquationBlock
  | DividerBlock
  | TableOfContentsBlock
  | ColumnBlock
  | ColumnListBlock
  | LinkPreviewBlock
  | SyncedBlock
  | TemplateBlock
  | LinkToPageBlock
  | TableBlock
  | TableRowBlock
  | BreadcrumbBlock
  | AudioBlock
  | UnsupportedBlock;

// ============================================================================
// Type Utilities
// ============================================================================

/**
 * Type guard to check if a value is a block.
 *
 * @param value - The value to check.
 * @returns True if the value is a block.
 */
export function isBlock(value: unknown): value is Block {
  return (
    value !== null &&
    value !== undefined &&
    typeof value === "object" &&
    "object" in value &&
    value.object === "block" &&
    "id" in value &&
    typeof value.id === "string"
  );
}

/**
 * Gets the type of a block.
 *
 * @param block - The block to get the type from.
 * @returns The block type.
 */
export function getBlockType(block: { type: string }): string {
  return block.type;
}

/**
 * Checks if a block has children.
 *
 * @param block - The block to check.
 * @returns True if the block has children.
 */
export function hasChildren(block: { has_children?: boolean }): boolean {
  return block.has_children === true;
}
